/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN MerchantActionsGenerated.js PLEASE EDIT ../MerchantActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import MerchantApi from "../../../api/MerchantApi";

let actionsFunction = {

  //CRUD METHODS

  // Create merchant
  createMerchant: function(merchant) {
    return function(dispatch) {
      return MerchantApi
        .createMerchant(merchant)
        .then(merchant => {
          dispatch(actionsFunction.createMerchantSuccess(merchant));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createMerchantSuccess: function(merchant) {
    return { type: types.CREATE_MERCHANT_SUCCESS, payload: merchant };
  },


  // Delete merchant
  deleteMerchant: function(id) {
    return function(dispatch) {
      return MerchantApi
        .deleteMerchant(id)
        .then(merchant => {
          dispatch(actionsFunction.deleteMerchantSuccess(merchant));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteMerchantSuccess: function(merchant) {
    return { type: types.DELETE_MERCHANT_SUCCESS, payload: merchant };
  },


  // Get merchant
  loadMerchant: function(id) {
    return function(dispatch) {
      return MerchantApi
        .getOneMerchant(id)
        .then(merchant => {
          dispatch(actionsFunction.loadMerchantSuccess(merchant));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadMerchantSuccess: function(merchant) {
    return { type: types.GET_MERCHANT_SUCCESS, payload: merchant };
  },

  // Load  list
  loadMerchantList: function() {
    return function(dispatch) {
      return MerchantApi
        .getMerchantList()
        .then(list => {
          dispatch(actionsFunction.loadMerchantListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadMerchantListSuccess: function(list) {
    return { type: types.LIST_MERCHANT_SUCCESS, payload: list };
  },

	
  // Save merchant
  saveMerchant: function(merchant) {
    return function(dispatch) {
      return MerchantApi
        .saveMerchant(merchant)
        .then(merchant => {
          dispatch(actionsFunction.saveMerchantSuccess(merchant));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveMerchantSuccess: function(merchant) {
    return { type: types.UPDATE_MERCHANT_SUCCESS, payload: merchant };
  },


};

export default actionsFunction;
