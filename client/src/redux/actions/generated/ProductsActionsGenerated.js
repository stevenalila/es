/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN ProductsActionsGenerated.js PLEASE EDIT ../ProductsActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import ProductsApi from "../../../api/ProductsApi";

let actionsFunction = {

  //CRUD METHODS

  // Create products
  createProducts: function(products) {
    return function(dispatch) {
      return ProductsApi
        .createProducts(products)
        .then(products => {
          dispatch(actionsFunction.createProductsSuccess(products));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createProductsSuccess: function(products) {
    return { type: types.CREATE_PRODUCTS_SUCCESS, payload: products };
  },


  // Delete products
  deleteProducts: function(id) {
    return function(dispatch) {
      return ProductsApi
        .deleteProducts(id)
        .then(products => {
          dispatch(actionsFunction.deleteProductsSuccess(products));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteProductsSuccess: function(products) {
    return { type: types.DELETE_PRODUCTS_SUCCESS, payload: products };
  },


  // Get products
  loadProducts: function(id) {
    return function(dispatch) {
      return ProductsApi
        .getOneProducts(id)
        .then(products => {
          dispatch(actionsFunction.loadProductsSuccess(products));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadProductsSuccess: function(products) {
    return { type: types.GET_PRODUCTS_SUCCESS, payload: products };
  },

  // Load  list
  loadProductsList: function() {
    return function(dispatch) {
      return ProductsApi
        .getProductsList()
        .then(list => {
          dispatch(actionsFunction.loadProductsListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadProductsListSuccess: function(list) {
    return { type: types.LIST_PRODUCTS_SUCCESS, payload: list };
  },

	
  // Save products
  saveProducts: function(products) {
    return function(dispatch) {
      return ProductsApi
        .saveProducts(products)
        .then(products => {
          dispatch(actionsFunction.saveProductsSuccess(products));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveProductsSuccess: function(products) {
    return { type: types.UPDATE_PRODUCTS_SUCCESS, payload: products };
  },


};

export default actionsFunction;
